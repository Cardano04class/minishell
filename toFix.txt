[ DONE ] - check heredoc expand.waiting amirs expand to work on it

[ DONE ] - check exit status working but still need some test cases :
        * fixing exit with any numeric value (exit 12, per example).
        * the exit status should be checked also for the Builtins and syntax_error. 
                (both * for amine).

[ DONE ] - and still need to check the case of $ expand of variable that doesnt exits and have nothing it. 
        when writing in the prompt it return a white spaces to the t_lt list, and nedds to be freed instead of returning a white space to parser .

[ DONE ] - Norminette.

- Checking allocations like this to see if there rightly allocated : "g_mini.command = _malloc(sizeof(t_cmd), 'm');".

- ***for amir*** : 
        + check ft_strdup.c, why commenting NULL protection ?
        + reahab.c ? ach had l9lawi.
        + expand nominette!
        + main Norminette, chderna fiha ?

- I need to fix these cases :
             |   minishell$ "ls"|wc -l									
             |   ls|wc: command not found								
[ DONE ]     |   minishell$ bash										
             |   mobouifr@e1r1p7:~/Desktop/MINISHELL$ "ls"|wc -l	
             |   12														
             |   mobouifr@e1r1p7:~/Desktop/MINISHELL$ 


             |  minishell$ ls >out
[ DONE ]     |  includes  Makefile  minishell  readline.supp  README.md  src  toFix.txt  utils
             |  minishell$ ^C
				
             |   minishell$ ls
             |   includes  Makefile  minishell  readline.supp  README.md  src  toFix.txt  utils
             |   minishell$ echo $_
             |   /home/mobouifr/Desktop/MINISHELL/./minishell
[ DONE ]     |   minishell$ ls -a
             |   .   .DS_Store  .gitignore  Makefile   readline.supp  src	utils
             |   ..  .git       includes    minishell  README.md      toFix.txt	.vscode
             |   minishell$ echo $_
             |   -a
             |   minishell$ 


             |   minishell$ ls > $adas (ambiguous file test)
             
             |   minishell$ > out (memmory errors)

             |   minishell$ echo "lssss" > out | ls -a > out1
             |   .   .DS_Store  .gitignore  Makefile   out   readline.supp  src	      utils
[ DONE ]     |   ..  .git       includes    minishell  out1  README.md	   toFix.txt  .vscode
             |   minishell$ cat out
             |   minishell$ cat out1
             |   lssss


             |   minishell$ cat << p -e | cat << l
[ DONE ]     |   >ppp
             |   >p
             |   minishell$ 



#include "minishell.h"

t_global	g_mini;

int	empty_prompt(char *rl)
{
	int	i;

	i = 0;
	while (rl[i] && (rl[i] != ' ' && rl[i] != '\t'))
	{
		i++;
	}
	return (i);
}

void	debug_cmd_after_parser(void)
{
	t_cmd *tmp = g_mini.command;
	while (tmp)
	{
		int i = 0;
		while (tmp->cmd[i])
		{
			printf("tmp = %s\n", tmp->cmd[i]);
			i++;
		}
		puts("pipe");
		tmp = tmp->next;
	}
}

void	intialise_prompt_variables(void)
{
	g_mini.sig_flag = 0;
	g_mini.command = _malloc(sizeof(t_cmd), 'm');
	g_mini.command->cmd = NULL;
	g_mini.command->files = NULL;
	g_mini.command->next = NULL;
}

void parse_and_execute(t_list *list)
{
	expand(g_mini.env, &list);
	parser(list);
	run_heredoc(g_mini.command);
	execution(g_mini.command);
}

int rl_is_null(char *rl)
{
	if (rl == NULL)
	{
		printf("exit\n");
		g_mini.exit_status = 127;
		return (1);
	}
	return (0);
}

void	prompt(char **env)
{
	char	*rl;
	t_list	*list;

	g_mini.env = NULL;
	list = NULL;
	ft_env(env, &g_mini.env);
	signal(SIGQUIT, SIG_IGN);
	g_mini.exit_status = 0;
	while (1)
	{
		intialise_prompt_variables();
		signal(SIGINT, handle_sigint);
		rl = readline("minishell$ ");
		if (rl_is_null(rl))
			break ;
		if (empty_prompt(rl) == 0)
			continue ;
		lexer(rl, &list);
		if (!syntax_error(list))
			parse_and_execute(list);
		ft_lstclear(&list);
		add_history(rl);
	}
	_malloc(0, 'f');
}

int	main(int ac, char **av, char **env)
{
	(void)av;
	if (ac == 1)
	{
		prompt(env);
		return (g_mini.exit_status);
	}
	else
		return (1);
}